{"version":3,"file":"script.min.js","sources":["js/config.js","js/main.js","js/utils.js","js/goToTargetURL.js"],"sourcesContent":["export const corsProxy = \"https://corsproxy.io/?\";\n\nconst isGithub = window.location.href.includes(\"github\");\n\nconst issuesURLGitlab =\n\t\"https://forge.apps.education.fr/url/url.forge.apps.education.fr/-/issues/\";\nconst issuesURLGithub = \"https://github.com/eyssette/url/issues/\";\n\nexport const issuesURL = isGithub ? issuesURLGithub : issuesURLGitlab;\n\nconst stringIssueGitlab = \" \\\\(#\";\nconst stringIssueGithub = \" · Issue #\";\nconst stringIssue = isGithub ? stringIssueGithub : stringIssueGitlab;\nexport const baseRegexToFindTargeURL = \"<title>(.*?)\" + stringIssue;\n","import { toNumber } from \"./utils\";\nimport { goToTargetURL } from \"./goToTargetURL\";\n\n// On récupère l'ID après le hash\nconst targetID = window.location.hash.substring(1).replace(/\\?.*/, \"\");\nconst targetIDtoNumber = toNumber(targetID);\n\nif (targetIDtoNumber) {\n\tgoToTargetURL(targetIDtoNumber);\n}\n","export function toNumber(value) {\n\t// Vérifie si la valeur est déjà un nombre\n\tif (typeof value === \"number\" && !isNaN(value)) {\n\t\treturn value;\n\t}\n\n\t// Tente de convertir en nombre si c'est une chaîne de caractères\n\tconst convertedValue = Number(value);\n\tif (!isNaN(convertedValue)) {\n\t\treturn convertedValue;\n\t}\n\n\t// Retourne null si la conversion a échoué\n\treturn null;\n}\n","import { corsProxy, issuesURL, baseRegexToFindTargeURL } from \"./config\";\n\n// On redirige vers l'URL correspondante\nexport async function goToTargetURL(targetID) {\n\tconst url = corsProxy + issuesURL + targetID;\n\n\ttry {\n\t\tconst response = await fetch(url);\n\t\tif (!response.ok) {\n\t\t\tthrow new Error(`HTTP error! Status: ${response.status}`);\n\t\t}\n\n\t\tconst html = await response.text();\n\t\tconst regex = baseRegexToFindTargeURL + targetID;\n\t\tconst titleElement = html.match(regex);\n\n\t\tlet targetURL;\n\t\tif (titleElement) {\n\t\t\ttargetURL = titleElement[1].trim();\n\t\t}\n\t\twindow.location.href = targetURL;\n\t} catch (error) {\n\t\tconsole.error(\"Erreur lors de la récupération de l'issue :\", error);\n\t\treturn null;\n\t}\n}\n"],"names":["isGithub","window","location","href","includes","issuesURL","baseRegexToFindTargeURL","targetIDtoNumber","value","isNaN","convertedValue","Number","toNumber","hash","substring","replace","async","targetID","url","response","fetch","ok","Error","status","html","text","regex","titleElement","match","targetURL","trim","error","console","goToTargetURL"],"mappings":"yBAAO,MAEDA,EAAWC,OAAOC,SAASC,KAAKC,SAAS,UAMlCC,EAAYL,EAFD,0CADvB,4EAQYM,EAA0B,gBADnBN,EADM,aADA,SCN1B,MACMO,ECLC,SAAkBC,GAExB,GAAqB,iBAAVA,IAAuBC,MAAMD,GACvC,OAAOA,EAIR,MAAME,EAAiBC,OAAOH,GAC9B,OAAKC,MAAMC,GAKJ,KAJCA,CAKT,CDTyBE,CADRX,OAAOC,SAASW,KAAKC,UAAU,GAAGC,QAAQ,OAAQ,KAG/DR,GEJGS,eAA6BC,GACnC,MAAMC,EHJkB,yBGIAb,EAAYY,EAEpC,IACC,MAAME,QAAiBC,MAAMF,GAC7B,IAAKC,EAASE,GACb,MAAM,IAAIC,MAAM,uBAAuBH,EAASI,UAGjD,MAAMC,QAAaL,EAASM,OACtBC,EAAQpB,EAA0BW,EAClCU,EAAeH,EAAKI,MAAMF,GAEhC,IAAIG,EACAF,IACHE,EAAYF,EAAa,GAAGG,QAE7B7B,OAAOC,SAASC,KAAO0B,CACvB,CAAC,MAAOE,GAER,OADAC,QAAQD,MAAM,8CAA+CA,GACtD,IACP,CACF,CFjBCE,CAAc1B"}